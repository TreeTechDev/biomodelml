from unittest import TestCase
from src.matrices import build_matrix
from Bio.Seq import Seq
from numpy.testing import assert_equal


class TestBuildPalindromeMatrix(TestCase):
    def setUp(self):
        self.sequence = Seq("ACCTAGGT")

    def test_should_detect_palindrome(self):
        matrix = build_matrix(self.sequence, self.sequence, 20)
        assert_equal(matrix[:,:, 0], matrix[:,:, 1])

class TestBuildDirectRepeatMatrix(TestCase):
    def setUp(self):
        self.sequence = Seq("TTACGTTACG")

    def test_should_detect_direct_repeat(self):
        matrix = build_matrix(self.sequence, self.sequence, 20)
        assert_equal(matrix[:,:, 0], matrix[:,:, 0].T)
        self.assertTrue((matrix[:,:, 0] == matrix[:,:, 0].T).all())
        self.assertFalse((matrix[:,:, 1] == matrix[:,:, 1].T).all())

class TestBuildRepeatMatrix(TestCase):
    def setUp(self):
        self.sequence = Seq("TTACGGCATT")

    def test_should_detect_repeat(self):
        matrix = build_matrix(self.sequence, self.sequence, 20)
        assert_equal(matrix[:,:, 0], matrix[:,:, 0].T)
        assert_equal(matrix[:,:, 1], matrix[:,:, 1].T)
        assert_equal(matrix[:,:, 2], matrix[:,:, 2].T)

class TestBuildMatrix(TestCase):
    def setUp(self):
        self.sequence = Seq("CCCTTTACGTTTTCCCTGCA")

    def test_should_build_red_layer(self):
        layer = [
            [
                20, 2, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 2, 6, 0, 0, 1, 0
            ],
            [
                2, 20, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 6, 2, 0, 0, 1, 0
            ],
            [
                3, 2, 20, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 2, 4, 0, 0, 1, 0
            ],
            [
                0, 0, 0, 20, 2, 3, 0, 0, 0, 3, 3, 3, 6, 0, 0, 0, 4, 0, 0, 0
            ],
            [
                0, 0, 0, 2, 20, 2, 0, 0, 0, 2, 3, 6, 2, 0, 0, 0, 1, 0, 0, 0
            ],
            [
                0, 0, 0, 3, 2, 20, 0, 0, 0, 3, 6, 3, 3, 0, 0, 0, 1, 0, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4
            ],
            [
                1, 1, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 4, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0
            ],
            [
                0, 0, 0, 3, 2, 3, 0, 0, 0, 20, 3, 3, 4, 0, 0, 0, 4, 0, 0, 0
            ],
            [
                0, 0, 0, 3, 3, 6, 0, 0, 0, 3, 20, 4, 3, 0, 0, 0, 1, 0, 0, 0
            ],
            [
                0, 0, 0, 3, 6, 3, 0, 0, 0, 3, 4, 20, 3, 0, 0, 0, 1, 0, 0, 0
            ],
            [
                0, 0, 0, 6, 2, 3, 0, 0, 0, 4, 3, 3, 20, 0, 0, 0, 5, 0, 0, 0
            ],
            [
                4, 2, 6, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 20, 2, 5, 0, 0, 1, 0
            ],
            [
                2, 6, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 20, 2, 0, 0, 1, 0
            ],
            [
                6, 2, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 2, 20, 0, 0, 1, 0
            ],
            [
                0, 0, 0, 4, 1, 1, 0, 0, 0, 4, 1, 1, 5, 0, 0, 0, 20, 0, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0
            ],
            [
                1, 1, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 20, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20
            ],
        ]
        matrix = build_matrix(self.sequence, self.sequence, 20)
        assert_equal(matrix[:,:, 0], layer)

    def test_should_build_green_layer(self):
        layer = [
            [
                0, 0, 0, 5, 5, 5, 0, 0, 0, 20, 5, 5, 5, 0, 0, 0, 20, 0, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0
            ], 
            [
                5, 5, 5, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 20, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5
            ],
            [
                0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5
            ],
            [
                0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5
            ],
            [
                0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20
            ],
            [
                5, 5, 5, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 20, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0
            ],
            [
                0, 0, 0, 5, 5, 10, 0, 0, 0, 20, 5, 5, 5, 0, 0, 0, 20, 0, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5
            ],
            [
                0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5
            ],
            [
                0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0
            ]
        ]

        matrix = build_matrix(self.sequence, self.sequence, 20)
        assert_equal(matrix[:,:, 1], layer)

    def test_should_build_blue_layer(self):
        layer = [

            [
                0, 0, 0, 6.666666666666667, 0, 13.333333333333334, 0, 0, 0, 0, 0, 0, 6.666666666666667, 0, 0, 0, 6.666666666666667, 0, 0, 0
            ], 
            [
                0, 0, 0, 0, 0, 0, 0, 0, 3.3333333333333335, 0, 0, 0, 0, 0, 0, 0, 0, 3.3333333333333335, 0, 0
            ], 
            [
                0, 0, 0, 0, 0, 6.666666666666667, 10, 0, 10, 10, 0, 0, 0, 0, 0, 0, 6.666666666666667, 0, 0, 0
            ], 
            [
                6.666666666666667, 0, 0, 0, 0, 0, 6.666666666666667, 0, 6.666666666666667, 0, 0, 0, 0, 0, 0, 6.666666666666667, 0, 0, 0, 0
            ], 
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13.333333333333334, 0, 0
            ], 
            [
                13.333333333333334, 0, 6.666666666666667, 0, 0, 0, 6.666666666666667, 0, 6.666666666666667, 0, 0, 0, 0, 6.666666666666667, 0, 0, 0, 0, 13.333333333333334, 0
            ], 
            [
                0, 0, 10, 6.666666666666667, 0, 6.666666666666667, 0, 0, 10, 20, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0.0
            ], 
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ], 
            [
                0, 3.3333333333333335, 10, 6.666666666666667, 0, 6.666666666666667, 10, 0, 0, 10, 10, 10, 10, 13.333333333333334, 0, 0, 0, 0, 0, 0
            ], 
            [
                0, 0, 10, 0, 0, 0, 20, 0, 10, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0
            ], 
            [
                0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 0, 13.333333333333334, 0, 0, 0, 0
            ], 
            [
                0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 0, 0, 0, 16.666666666666668, 0, 0
            ], 
            [
                6.666666666666667, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0, 6.666666666666667, 0, 0, 0, 0
            ], 
            [
                0, 0, 0, 0, 0, 6.666666666666667, 10, 0, 13.333333333333334, 10, 10, 10, 0, 0, 0, 0, 6.666666666666667, 0, 0, 0
            ], 
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ], 
            [
                0, 0, 0, 6.666666666666667, 0, 0, 0, 0, 0, 0, 13.333333333333334, 0, 6.666666666666667, 0, 0, 0, 6.666666666666667, 0, 0, 0
            ], 
            [
                6.666666666666667, 0, 6.666666666666667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.666666666666667, 0, 6.666666666666667, 0, 0, 0, 0
            ], 
            [
                0, 3.3333333333333335, 0, 0, 13.333333333333334, 0, 0, 0, 0, 0, 0, 16.666666666666668, 0, 0, 0, 0, 0, 0, 0, 0
            ], 
            [
                0, 0, 0, 0, 0, 13.333333333333334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ], 
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ]
        ]

        matrix = build_matrix(self.sequence, self.sequence, 20)
        assert_equal(matrix[:,:, 2], layer)